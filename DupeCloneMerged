-- Authentication Part
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local myUsername = LocalPlayer.Name

-- Config
local SENDER_PASTE = "pC0kJODR"   -- Sender's Pastefy ID
local RECEIVER_PASTE = "BRMZOCHO"  -- Receiver's Pastefy ID
local API_KEY = "R7No5DyvKXEqPoBRgrejhkKWkPJ99B4ST0g0lvdQohj7Ejer5o9ZKVcTrPVE"

-- GUI Setup
local authGui = Instance.new("ScreenGui", game.CoreGui)
authGui.Name = "AuthGUI"

local frame = Instance.new("Frame", authGui)
frame.Size = UDim2.new(0, 350, 0, 250)
frame.Position = UDim2.new(0.5, -175, 0.5, -125)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true

local title = Instance.new("TextLabel", frame)
title.Text = "🔐 Pair Authentication"
title.Size = UDim2.new(1, 0, 0, 30)
title.Position = UDim2.new(0, 0, 0, 5)
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.BackgroundTransparency = 1
title.Font = Enum.Font.GothamBold
title.TextSize = 18

local userBox = Instance.new("TextBox", frame)
userBox.Size = UDim2.new(0.9, 0, 0, 35)
userBox.Position = UDim2.new(0.05, 0, 0, 40)
userBox.PlaceholderText = "Enter Partner's Username"
userBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
userBox.TextColor3 = Color3.fromRGB(255, 255, 255)
userBox.BorderSizePixel = 0
userBox.Font = Enum.Font.Gotham
userBox.TextSize = 14
userBox.ClearTextOnFocus = false

local roleDropdown = Instance.new("TextButton", frame)
roleDropdown.Size = UDim2.new(0.9, 0, 0, 35)
roleDropdown.Position = UDim2.new(0.05, 0, 0, 85)
roleDropdown.Text = "Role: Sender"
roleDropdown.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
roleDropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
roleDropdown.BorderSizePixel = 0
roleDropdown.Font = Enum.Font.Gotham
roleDropdown.TextSize = 14

local submitBtn = Instance.new("TextButton", frame)
submitBtn.Size = UDim2.new(0.9, 0, 0, 35)
submitBtn.Position = UDim2.new(0.05, 0, 0, 130)
submitBtn.Text = "Submit Username"
submitBtn.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
submitBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
submitBtn.BorderSizePixel = 0
submitBtn.Font = Enum.Font.GothamBold
submitBtn.TextSize = 14

local statusLabel = Instance.new("TextLabel", frame)
statusLabel.Size = UDim2.new(0.9, 0, 0, 50)
statusLabel.Position = UDim2.new(0.05, 0, 0, 210)
statusLabel.Text = "Status: 🟡 Waiting..."
statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statusLabel.BackgroundTransparency = 1
statusLabel.Font = Enum.Font.Gotham
statusLabel.TextSize = 14
statusLabel.TextWrapped = true

-- Variables
local isSender = true
local checking = false
local roleLocked = false
local partnerUsername = ""
local authenticated = false

-- API Functions
local function editPaste(pasteId, content)
    local request = (syn and syn.request) or (http and http.request) or http_request
    local res = request({
        Url = "https://pastefy.app/api/v2/paste/" .. pasteId,
        Method = "PUT",
        Headers = {
            ["Authorization"] = "Bearer " .. API_KEY,
            ["Content-Type"] = "application/json"
        },
        Body = HttpService:JSONEncode({
            type = "PASTE",
            title = "auth",
            content = content,
            encrypted = false,
            visibility = "UNLISTED"
        })
    })
    return res.StatusCode == 200
end

local function getPaste(pasteId)
    local request = (syn and syn.request) or (http and http.request) or http_request
    local res = request({
        Url = "https://pastefy.app/api/v2/paste/" .. pasteId,
        Method = "GET",
        Headers = {
            ["Accept"] = "application/json"
        }
    })
    if res.StatusCode == 200 then
        return HttpService:JSONDecode(res.Body).content
    end
    return nil
end

-- Verification Logic
local function verifyPartner(partnerName)
    if partnerName == "" or partnerName:lower() == myUsername:lower() then
        statusLabel.Text = "Status: 🔴 Invalid username!"
        checking = false
        return false
    end

    local myPaste = isSender and SENDER_PASTE or RECEIVER_PASTE
    local theirPaste = isSender and RECEIVER_PASTE or SENDER_PASTE

    statusLabel.Text = "Status: 🟠 Writing to paste..."
    if not editPaste(myPaste, partnerName) then
        statusLabel.Text = "Status: 🔴 Failed to write!"
        checking = false
        return false
    end

    while checking do
        local theirContent = getPaste(theirPaste)

        if theirContent and theirContent ~= "" then
            if theirContent:lower() == myUsername:lower() then
                statusLabel.Text = "Status: 🟢 Verified!"
                partnerUsername = partnerName
                authenticated = true
                checking = false
                
                -- Destroy auth GUI for both roles
                authGui:Destroy()
                
                -- Only load trade GUI if sender
                if isSender then
                    task.wait(1)
                    loadTradeDupeGui(partnerName)
                end
                return true
            elseif theirContent:lower() ~= partnerName:lower() then
                statusLabel.Text = "Status: 🟠 Found data, but mismatch!"
            else
                statusLabel.Text = "Status: 🟡 Waiting for partner..."
            end
        else
            statusLabel.Text = "Status: 🟡 Waiting for partner..."
        end

        task.wait(2)
    end

    return false
end

-- Submit Button
submitBtn.MouseButton1Click:Connect(function()
    if checking then
        checking = false
        task.wait(0.1)
    end
    checking = true
    task.spawn(function()
        local success = verifyPartner(userBox.Text)
        if not success then
            checking = false
        end
    end)
end)

-- Passive Role Detection
task.spawn(function()
    while true do
        local senderContent = getPaste(SENDER_PASTE)
        local receiverContent = getPaste(RECEIVER_PASTE)

        if senderContent and senderContent:lower() == myUsername:lower() then
            isSender = false
            roleDropdown.Text = "Role: Receiver (Locked)"
            roleLocked = true
            roleDropdown.AutoButtonColor = false
            roleDropdown.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
            statusLabel.Text = "Status: 🔄 Role auto-set to Receiver"
        elseif receiverContent and receiverContent:lower() == myUsername:lower() then
            isSender = true
            roleDropdown.Text = "Role: Sender (Locked)"
            roleLocked = true
            roleDropdown.AutoButtonColor = false
            roleDropdown.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
            statusLabel.Text = "Status: 🔄 Role auto-set to Sender"
        end

        task.wait(2)
    end
end)

-- Trade and Dupe GUI (Only loads after successful auth for sender)
function loadTradeDupeGui(partnerName)
    local rs = game:GetService("ReplicatedStorage")
    local plrs = game:GetService("Players")
    local lp = plrs.LocalPlayer
    local trade_event = rs:WaitForChild("GameEvents"):WaitForChild("TradeEvents")
    local back = lp:WaitForChild("Backpack")
    local TeleportService = game:GetService("TeleportService")

    -- Variables for dupe
    local selectedPetInfo = nil
    local trading = false
    local ticketTool = nil

    -- GUI Setup
    local gui = Instance.new("ScreenGui", lp:WaitForChild("PlayerGui"))
    gui.Name = "TradeDupeGUI"
    gui.ResetOnSpawn = false

    local frame = Instance.new("Frame", gui)
    frame.Size = UDim2.new(0, 300, 0, 350)
    frame.Position = UDim2.new(0.5, -150, 0.5, -175)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.Active = true
    frame.Draggable = true

    local title = Instance.new("TextLabel", frame)
    title.Text = "TRADE & DUPE"
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    title.TextColor3 = Color3.new(1, 1, 1)
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame

    local usernameBox = Instance.new("TextBox", frame)
    usernameBox.Size = UDim2.new(1, -10, 0, 25)
    usernameBox.Position = UDim2.new(0, 5, 0, 35)
    usernameBox.PlaceholderText = "Username..."
    usernameBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    usernameBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    usernameBox.ClearTextOnFocus = false
    usernameBox.Text = partnerName

    local petListFrame = Instance.new("ScrollingFrame", frame)
    petListFrame.Size = UDim2.new(1, -10, 0, 180)
    petListFrame.Position = UDim2.new(0, 5, 0, 65)
    petListFrame.CanvasSize = UDim2.new(0,0,0,0)
    petListFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    petListFrame.ScrollBarThickness = 6

    local selectedLabel = Instance.new("TextLabel", frame)
    selectedLabel.Text = "No pet selected"
    selectedLabel.Size = UDim2.new(1, -10, 0, 25)
    selectedLabel.Position = UDim2.new(0, 5, 0, 250)
    selectedLabel.BackgroundTransparency = 1
    selectedLabel.TextColor3 = Color3.new(1, 1, 1)

    local tradeButton = Instance.new("TextButton", frame)
    tradeButton.Size = UDim2.new(1, -10, 0, 25)
    tradeButton.Position = UDim2.new(0, 5, 1, -30)
    tradeButton.Text = "Trade & Dupe Selected"
    tradeButton.BackgroundColor3 = Color3.fromRGB(70, 130, 70)
    tradeButton.TextColor3 = Color3.fromRGB(255, 255, 255)

    local statusLabel = Instance.new("TextLabel", frame)
    statusLabel.Text = "Status: Ready"
    statusLabel.Size = UDim2.new(1, -10, 0, 20)
    statusLabel.Position = UDim2.new(0, 5, 0, 280)
    statusLabel.BackgroundTransparency = 1
    statusLabel.TextColor3 = Color3.new(1, 1, 1)

    -- Auto accept/confirm loop
    task.spawn(function()
        while task.wait(0.2) do
            if trading and require(rs.Modules.TradeControllers.TradingController).CurrentTradeId ~= nil then
                pcall(function()
                    trade_event:WaitForChild("Accept"):FireServer()
                    trade_event:WaitForChild("Confirm"):FireServer()
                end)
            end
        end
    end)

    -- Auto buy ticket if money >= 100000
    task.spawn(function()
        while task.wait(0.5) do
            local sheckles = lp:FindFirstChild("leaderstats") and lp.leaderstats:FindFirstChild("Sheckles")
            if sheckles and sheckles.Value >= 100000 then
                rs.GameEvents.BuyGearStock:FireServer("Trading Ticket")
            end
        end
    end)

    -- Track ticket
    local function findTicket()
        for _, tool in ipairs(back:GetChildren()) do
            if tool:IsA("Tool") and tool:GetAttribute("b") == "v" then
                return tool
            end
        end
        if lp.Character then
            for _, tool in ipairs(lp.Character:GetChildren()) do
                if tool:IsA("Tool") and tool:GetAttribute("b") == "v" then
                    return tool
                end
            end
        end
        return nil
    end

    -- Wait until ticket is found, then equip
    local function waitForTicket()
        ticketTool = findTicket()
        while not ticketTool do
            task.wait(0.1)
            ticketTool = findTicket()
        end
        if ticketTool.Parent == back then
            ticketTool.Parent = lp.Character
        end
    end

    -- PET SCANNING FUNCTION (using your requested version)
    local function scanPets()
    local pets = {}

    for _, child in ipairs(PlayerGui:GetDescendants()) do
        if (child:IsA("TextLabel") or child:IsA("TextButton")) and child.Text ~= "" then
            -- Match pets with weight (including 0.00) and age (including 0)
            local name, kg, age =
                child.Text:match("([%w%s]+)%s*[%[%(]%s*(%d+%.?%d*)%s*KG%s*[%]%)]%s*[%[%(]%s*Age%s*(%d+)%s*[%]%)]")

            if name and kg and age then
                pets[#pets + 1] = {
                    name = name:gsub("^%s*(.-)%s*$", "%1"), -- Trim spaces
                    kg = tonumber(kg),
                    age = tonumber(age),
                    displayText = string.format("%s (%.2fkg, Age %d)", name, kg, age),
                    button = child
                }
            end
        end
    end

    return pets
end

    -- Build Pet List UI
    local function refreshPetList()
        petListFrame:ClearAllChildren()
        selectedPetInfo = nil
        selectedLabel.Text = "No pet selected"
        tradeButton.BackgroundColor3 = Color3.fromRGB(70, 130, 70)
        
        local pets = scanPets()
        local y = 0
        
        if #pets == 0 then
            local label = Instance.new("TextLabel")
            label.Text = "No pets found. Open your inventory!"
            label.Size = UDim2.new(1, 0, 0, 30)
            label.TextColor3 = Color3.new(1, 1, 1)
            label.Parent = petListFrame
            statusLabel.Text = "Status: Open inventory to scan pets"
            return
        end

        for i, pet in ipairs(pets) do
            local btn = Instance.new("TextButton", petListFrame)
            btn.Size = UDim2.new(1, -10, 0, 22)
            btn.Position = UDim2.new(0, 5, 0, y)
            btn.Text = pet.displayText
            btn.BackgroundColor3 = i%2 == 0 and Color3.fromRGB(60,60,60) or Color3.fromRGB(50,50,50)
            btn.TextColor3 = Color3.fromRGB(255, 255, 255)
            btn.TextScaled = true

            btn.MouseButton1Click:Connect(function()
                -- Deselect all other buttons
                for _, child in ipairs(petListFrame:GetChildren()) do
                    if child:IsA("TextButton") then
                        child.BackgroundColor3 = child == btn and Color3.fromRGB(100, 180, 100) or 
                                               (i%2 == 0 and Color3.fromRGB(60,60,60) or Color3.fromRGB(50,50,50))
                    end
                end
                
                selectedPetInfo = pet
                selectedLabel.Text = "Selected: "..pet.name
                tradeButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
                statusLabel.Text = "Status: Ready to trade"
            end)

            y = y + 25
        end
        petListFrame.CanvasSize = UDim2.new(0,0,0,y)
        statusLabel.Text = string.format("Status: Found %d pets", #pets)
    end

    -- Server hop function
    local function serverHop()
        local servers = {}
        local req = (syn and syn.request) or (http and http.request) or http_request
        local res = req({
            Url = "https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Desc&limit=100",
            Method = "GET"
        })
        
        if res.StatusCode == 200 then
            local body = HttpService:JSONDecode(res.Body)
            for _, server in ipairs(body.data) do
                if server.playing and server.id ~= game.JobId then
                    table.insert(servers, server.id)
                end
            end
        end
        
        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
        else
            TeleportService:Teleport(game.PlaceId)
        end
    end

    -- Dupe after trade
    local function executeDupe()
        if not selectedPetInfo then return end
        statusLabel.Text = "Status: Preparing to dupe..."
        
        -- Prepare teleport script
        local teleportScript = string.format([[
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
            
            -- Wait for game to load
            task.wait(3)
            
            -- Find and click the pet button
            local function findAndClickPet()
                local petName = "%s"
                local petKG = %f
                local petAge = %d
                local targetText = string.format("%%s [%%.2f KG] [Age %%d]", petName, petKG, petAge)
                
                for _, child in ipairs(PlayerGui:GetDescendants()) do
                    if (child:IsA("TextLabel") or child:IsA("TextButton")) and child.Text == targetText then
                        if child:IsA("TextButton") then
                            child:FireServer("Click")
                        end
                        return true
                    end
                end
                return false
            end
            
            -- Try for 30 seconds
            for _ = 1, 30 do
                if findAndClickPet() then
                    break
                end
                task.wait(1)
            end
        ]], selectedPetInfo.name, selectedPetInfo.kg, selectedPetInfo.age)
        
        queue_on_teleport(teleportScript)
        
        -- Server hop after delay
        task.wait(5)
        statusLabel.Text = "Status: Server hopping to dupe..."
        serverHop()
    end

    -- Trade Button
    tradeButton.MouseButton1Click:Connect(function()
        local targetName = usernameBox.Text
        if targetName == "" or not selectedPetInfo then
            statusLabel.Text = "Enter username and select a pet first!"
            return
        end
        
        local target = plrs:FindFirstChild(targetName)
        if not target then
            statusLabel.Text = "Player not found in server!"
            return
        end

        trading = true
        statusLabel.Text = "Status: Starting trade..."

        -- Ensure ticket is ready before trade
        waitForTicket()

        -- Send trade request
        trade_event:WaitForChild("SendRequest"):FireServer(target)

        -- Wait for trade, then add pet
        task.spawn(function()
            local tradeController = require(rs.Modules.TradeControllers.TradingController)
            while tradeController.CurrentTradeId == nil do
                task.wait()
            end
            
            statusLabel.Text = "Status: Adding pet to trade..."
            
            -- Get the UID of the selected pet
            local dataService = require(rs.Modules.DataService)
            local petData = dataService:GetData().PetsData.PetInventory.Data
            local petUID = nil
            
            for uid, info in pairs(petData) do
                if info.PetType == selectedPetInfo.name and 
                   math.abs(info.KG - selectedPetInfo.kg) < 0.01 and 
                   info.Age == selectedPetInfo.age then
                    petUID = uid
                    break
                end
            end
            
            if petUID then
                trade_event:WaitForChild("AddItem"):FireServer("Pet", petUID)
                statusLabel.Text = "Status: Trade complete. Preparing dupe..."
                
                -- After trade completes, execute dupe
                executeDupe()
            else
                statusLabel.Text = "Could not find UID for selected pet!"
                trading = false
            end
        end)
    end)

    -- Initial scan
    refreshPetList()
    
    -- Auto refresh every 5 seconds
    task.spawn(function()
        while task.wait(5) do
            refreshPetList()
        end
    end)
end